# Delen en bewerken mag maar laat deze eerste regels staan.
# Bron : https://www.huizebruin.nl
# Bron File : https://github.com/huizebruin/s0tool/tree/main/esphome
# © Huizebruin.nl
#  # ⬇ Enable Home Assistant API ⬇ # 
api:
  services:
    - service: meterstand_gas
      variables:
        meter_value: float
      then:
        - globals.set:
            id: initial_gas_usage
            value: !lambda "return ( meter_value - (id(total_gas_pulses)) * atof(id(Select_pulse_gas).state.c_str()) ) ;"
        - globals.set:
            id: total_gas_pulses
            value:  "0"
            

globals:
  - id: initial_gas_usage
    type: float
    restore_value: yes
    initial_value: '0'
  - id: total_gas_pulses
    type: int
    restore_value: yes
    initial_value: '0'
    
select:
  # ⬇ gas per m3 rate ⬇ #
  - platform: template
    name: "Pulsrate gas per m3"
    id: Select_pulse_gas
    optimistic: true
    options:
      - "0.0001"
      - "0.008"
      - "0.007"
      - "0.006"
      - "0.005"
      - "0.001"
      - "0.09"
      - "0.08"
      - "0.07"
      - "0.06"
      - "0.05"
      - "0.01"
      - "0.1"
    initial_option: "0.001"
    restore_value: yes
    # on_value:
    #   then:
    #     - logger.log:
    #         format: "Chosen option: %s (index %d)"
    #         args: ["x.c_str()", "i"]number:

    
  - platform: template
    id: Select_pulse_gas
    name: 'Pulsrate gas per m3'
    optimistic: true
    mode: box
    min_value: '0.0001'
    max_value: '0.1'
    step: '1'
    restore_value: yes
    initial_value: '0.001'
    

#------------------------# gasmeter #------------------------#
binary_sensor:
  - platform: gpio
    id: internal_pulse_counter
    name: "Pulse Sensor gas"
    internal: false
    use_interrupt: false
    pin:
      number: D5
      allow_other_uses: true
      inverted: true
      mode:
        input: true
    on_press:
      - then:
          lambda: id(total_gas_pulses) += 1;

sensor:
#------------------------# gasmeter #------------------------#
# ⬇ gasmeter pulsen ⬇ #
  - platform: pulse_meter #pulse_counter
    internal_filter_mode: "PULSE"
    internal_filter: 50ms  
    pin: 
      number: D5
      allow_other_uses: true
    id: gasmeter_pulse
    name: "gasmeter pulse"
    state_class: measurement
    unit_of_measurement: "l/min"
    accuracy_decimals: 1
    icon: "mdi:gas-burner"
    filters:
      lambda: return x * atof(id(Select_pulse_gas).state.c_str()) * 1000;

# ⬇ Totaal gasmeter ⬇ #      
    total:
      id: sensor_pulse_meter_total
      name: "gasmeter Totaal"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: gas
      accuracy_decimals: 3
      filters:
        lambda: return x * atof(id(Select_pulse_gas).state.c_str());

      
# ⬇ gasmeter stand bij benadering ⬇ #
  - platform: template
    id: gasmeter_total
    name: "gasmeter stand"
    state_class: "total_increasing"
    icon: mdi:meter-gas
    unit_of_measurement: "m³"
    accuracy_decimals: 3
    lambda: return id(initial_gas_usage) + (id(total_gas_pulses) * atof(id(Select_pulse_gas).state.c_str()));

# ⬇ gaspulses  only web interface for debugging ⬇ #
  - platform: template
    id: gasmeter_pulses
    name: "gasmeter pulses totaal"
    state_class: "total_increasing"
    accuracy_decimals: 0
    lambda: return id(total_gas_pulses);
    internal: True

